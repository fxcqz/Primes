import numpy
import prime
import generator
import logging
import primes.utils.primality as primality


logger = logging.getLogger(__name__)

class Generator(generator.Generator):
    """Generate a set of prime pairs based on a specified gap.

    Prime pairs are two integers, p and q, where both are prime and p - gap = q.
    The set generated by this class will only return the upper values (p's).

    Attributes:
        primes (list): Set of primes  required to  construct the  list of  prime
                       pairs.
        gap (int): The value of the gap between the two primes.

    Keyword Arguments:
        minimum -- the minimum value to be used in the dataset (default 0)
        maximum -- the maximum value to be used in the dataset (default 2)
    """
    def __init__(self, minimum=0, maximum=2):
        super(self.__class__, self).__init__(minimum, maximum)
        self.path = "primes/generator/data/pairs/"
        sieve = prime.Generator(maximum=self.maximum)
        sieve.generate()
        self.primes = sieve.data
        self.gap = 2
        self.threshold = 500

    def set_gap(self, n):
        """Sets the gap instance variable."""
        self.gap = n

    def set_specifics(self, data):
        """See the stub in the Generator super class for more information. This
        implementation simply sets the gap.

        Arguments:
            data -- a dictionary of  values which  stores  specific settings for
                    generators.
        """
        try:
            if data["gap"]:
                self.set_gap(data["gap"])
        except KeyError:
            # if no `gap' key exists in the data then we use the default (2)
            pass

    def generate(self):
        """See the stub in the Generator super class for more information."""
        self.path += str(self.gap) + "/"
        logger.info("Checking cache")
        self.data = self.read_cache()
        cache_miss = self.not_in_cache()
        if cache_miss:
            self.data = list(self.data)
            for l in cache_miss:
                for v in l:
                    if primality.is_prime(v) and primality.is_prime(v-self.gap):
                        self.data.append(v)
            self.data.sort()
            self.data = numpy.array(self.data)
        else:
            self.data = []
            for i, p in enumerate(self.primes):
                if (p - self.gap) in self.primes:
                    self.data.append(p)
            self.data.sort()
            self.data = numpy.array(self.data)
            self.to_file()
